* Base Modifications
These are basic modifications to emacs because, let's face it, emacs out of the box is pretty unuauable. Ok, it sucks.
** Personal Info
#+BEGIN_SRC emacs-lisp
  (defvar user-email-address)
  (defvar user-full-name)

  (setq user-full-name "Dan Baggeroer"
	user-email-address "dbaggero@protonmail.com")

  (message "Personal Info Completed")
#+END_SRC
** Garbage Collection
Garbage Collection has always been a debated topic. Spposedly this helps handle things by determing the optimal value dynamically
#+BEGIN_SRC emacs-lisp
(use-package gcmh
    :ensure t
    :demand t
    :init
    (setq gcmh-verbose              t
    gcmh-lows-cons-threshold #x800000
    gcmh-high-cons-threshold #x800000
    gcmh-idle-delay              300)
    :config
    (gcmh-mode))

(message "GC completed")
#+END_SRC
** Define Constants
Just some helper functions to do some base determinations
#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac*
    (eq system-type 'darwin)
    "Are we on macOS?")
  (defconst *is-a-windows*
    (eq system-type 'windows-nt)
    "Are we running windows?! Gods help us!")
  (defconst *is-a-linux*
    (eq system-type 'gnu/linux)
    "Are we running Linux!?")
  (defconst *is-root*
    (string-equal "root" (getenv "USER"))
    "Are you ROOT?!")
  (defconst *rg*
    (executable-find "rg")
    "Do we have ripgrep?")
  (defconst *python*
    (executable-find "python")
    "Do we have python2?")
  (defconst *python3*
    (executable-find "python3")
    "Do we have python3?")
  (defconst *mvn*
    (executable-find "mvn")
    "Do we have maven?")
  (defconst *gcc*
    (executable-find "gcc")
    "Do we have gcc?")
  (defconst *git*
    (executable-find "git")
    "Do we have git?")
  (defconst *pdflatex*
    (executable-find "pdflatex")
    "Do we have pdflatex?")
(message "Const Completed")
#+END_SRC
** No Littering
This is a package that helps with emacs' tendancy to splatter backups and config files all over the emacs directory structure
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t
    :config
    (setq auto-save-file-name-transforms
	  `((".*" , (no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el")))
(message "GC Completed")
#+END_SRC
** Global Keybindings
#+begin_src emacs-lisp
  (defun dpy/config-edit ()
    "Go directly to the main configuration file."
    (interactive)
    (find-file (concat user-emacs-directory "config.org")))

  (defun dpy/config-reload ()
    "Reload the main configuration file without having to restart Emacs."
    (interactive)
    (message "*** RELOAD ***")
    (org-babel-load-file (expand-file-name (concat user-emacs-directory "config.org"))))

  (global-unset-key (kbd "C-x ;"))
  (global-unset-key (kbd "C-x f"))
  (global-set-key (kbd "C-c r") 'dpy/config-reload)
  (global-set-key (kbd "C-c e") 'dpy/config-edit)
  (global-set-key (kbd "C-:") 'toggle-truncate-lines)
  (global-set-key (kbd "C-x k") #'kill-this-buffer)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-x g") 'magit-status)
  ;; (global-set-key (kbd "C-c a") 'org-agenda)
  ;; (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "<f5>") 'mu4e)
  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-c C-\\") 'comment-or-uncomment-region)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "<f7>") 'vterm)

  (message "Global Keys Completed")
#+end_src

** UTF-8
Until such time as it becomes default:
#+begin_src emacs-lisp
  (defvar set-charset-priority)

  (set-charset-priority        'unicode)
  (setq local-coding-system    'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system        'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  (message "UTF-8 Completed")
#+end_src
** System Tweaks
The little things that make life worth living again:
#+begin_src emacs-lisp
  (setq config-nonexistant-file-or-buffer nil) ; just go already
  (setq save-interprogram-paste-before-kill t) ; save existing clipboard to killring before replacing it
  (setq require-final-newline               t) ; if there isn't one, add a newline at the end
  (setq inhibit-startup-message             t) ; I know what emacs is
  (setq ring-bell-function            'ignore) ; Don't ever beep. Just Don't.
  (setq visible-bell                      nil) ; Don't. Ever. Flash.
  (setq kill-do-not-save-duplicates         t) ; Just what it says
  (setq config-kill-process               nil) ; don't bother
  (setq compilation-scroll-output           t) ; scroll the compilation buffer as output appears
  (setq gnutls-min-prime-bits            4096) ; default is an absurdly small number

  (random                    t) ; initialize the RNG
  (delete-selection-mode     1) ; if something is highlighted and I start typing, erase it
  (transient-mark-mode       t) ; if switching buffers, disabl former buffer's mark
  (global-auto-revert-mode)
  (fset 'yes-or-no-p 'y-or-n-p) ; everone hates that
  (setq-default find-file-visit-truename t) ; follow symlinks automagically
  (setq-default vc-follow-symlinks       t) ; same for git
  (defalias 'list-buffers 'ibuffer-other-window)

  (message "System Tweaks Completed")
#+end_src
** Exec-Path-From-Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(darwin ns mac))
    (setq exec-path-from-shell-check-startup-files nil)
       (exec-path-from-shell-copy-env "GOPATH")
       (exec-path-from-shell-copy-env "PYTHONPATH")
       (exec-path-from-shell-initialize))
  (when (daemonp)
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "PYTHONPATH")
    (exec-path-from-shell-initialize)))
    (message "Exec-Path Completed")
#+end_src
** Frame Sizing
I frequently swap betwen the laptop and a 34" dekstop monitor. The size of hte viewing area should determine the size of the frames. Plus I hate it when it starts right up against the left bezel of the monitor. Now laptops are typcally around 900 pixels tall (unless you have a super duper ultra high resolution, and if so, bully for you!) So tweak the number below so anything bigger than that, make the width and height larger... yada yada... YMMV
#+begin_src emacs-lisp
  (defun dpy/set-initial-frame ()
    (let* ((base-factor 0.70)
	   (a-width (* (display-pixel-width) base-factor))
	   (a-height (* (display-pixel-height) base-factor))
	   (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
	   (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
      (set-frame-position (selected-frame) a-left a-top)
      (set-frame-size (selected-frame) (truncate a-width) (truncate a-height) t)))
  (setq frame-resize-pixelwise t)
  (dpy/set-initial-frame)


  ;; (if > (display-pixel-height) 900)  ;; <-- play with this number until you get what you want
  ;;     (setq default-frame-alist '((width . 210) (height . 80)))
  ;;   (setq default-frame-alist '((width .80) (height . 66)))
  ;; (setq initial-frame-alist '((top . 15) (left . 15)))
  ;; (message "Frame Sizing Completed")
#+end_src
* Appearance
** Bar Modifications
I like to keep the menu bar around due to the dynamic aspect. Otherwise, get rid of them.
#+begin_src emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'tab-bar-mode)
    (tab-bar-mode -1))
(set-fringe-mode 10)
(message "Bar Mode Completed")
#+end_src
** Cursor
Some settings to make the cursor more friendly and informative
#+begin_src emacs-lisp
  (setq-default cursor-type 'box)
  (blink-cursor-mode (- (*) (*) (*)))

  ;; Depending on the mode, let's change the cursor depending on circumstances
  (defvar dpy/read-only-color        "red")
  (defvar dpy/read-only-cursor-type  'hbar)
  (defvar dpy/normal-color          "grey")
  (defvar dpy/normal-cursor-type      'box)

  (defun dpy/set-cursor-according-to-mode ()
    "change the cursor color and type according to some minor modes."
    (cond
     (buffer-read-only
      (set-cursor-color dpy/read-only-color)
      (setq cursor-type dpy/read-only-cursor-type))
     (t
      (set-cursor-color dpy/normal-color)
      (setq cursor-type dpy/normal-cursor-type))))
  (add-hook 'post-command-hook 'dpy/set-cursor-according-to-mode)

  (message "Cursor Completed")
#+end_src
** Themes
Themes are like the weather, everchanging. Currently I'm fond of...
#+begin_src emacs-lisp
  (setq custom-safe-theme t)
  (use-package vscode-dark-plus-theme
    :ensure t
    :init
    (load-theme 'vscode-dark-plus t))
  ;; (use-package doom-themes
  ;;   :config
  ;;   ;; Global Settings (defaults)
  ;;   (setq doom-themes-emable-bold t     ; if nil, bold is universally disabled
  ;; 	doom-themes-enable-italic t)  ; if nil, italics is universally disabled
  ;;   (load-theme 'doom-palenight t))

(message "Themes Completed")
#+end_src
** Mode Line
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package smart-mode-line
    :ensure t
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'respectful)   ; respect the theme colors
    (setq sml/mode-width 'right
          sml/name-width 60)
    (setq-default mode-line-format
                  `("%e",
                    mode-line-front-space
                    mode-line-mule-info
                    mode-line-client
                    mode-line-modified
                    mode-line-remote
                    mode-line-frame-identification
                    mode-line-buffer-identification
                    sml/pos-id-separator
                    (vc-mode vc-mode)
                    " "
                  ;; mode-line-position
                    sml/pre-modes-separator
                    mode-line-modes
                    " "
                    mode-line-misc-info)))



  (defvar boon-command-state)
  (defvar boon-insert-state)
  (defvar boon-special-state)
  (defvar boon-off-state)

  (use-package doom-modeline
    :disabled
    :ensure t
    :hook (after-init-hook . doom-modeline-mode)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-color-icon t))

  (use-package mode-icons
    :ensure t
    :config
    (mode-icons-mode))

    (use-package powerline
      :ensure t
      :config
      (powerline-center-theme)
      :custom
      (powerline-default-separator 'curve)
      (powerline-gui-use-vcs-glyph t)
      (powerline-display-buffer-size nil)
      (powerline-display-hud nil)
      (powerline-display-mule-info nil)
      (powerline-default-separator-dir (quote (left . right))))
    ;;   (powerline-height 28)




    ;;   (powerline-inactive1 '((t (:background "grey11" :foreground "#c5c8c6"))))
    ;;   (powerline-inactive2 '((t (:background "grey20" :foreground "#c5c8c6")))))

    ;; (defun powerline-get-icon (name alt-sym help-message)
    ;;   "Returns a propertized icon if available, otherwise returns ALT-SYM."
    ;;   (propertize alt-sym 'help-echo help-message))

    ;; (defun powerline-modified ()
    ;;   (condition-case ex
    ;;       (let ((state (vc-git-state (buffer-file-name))))
    ;;         (cond ((buffer-modified -p)  (powerline-get-icon "pencil" "+" "Modified buffer"))
    ;;               ((eq state 'edited)    (powerline-get-icon "pencil" "+" "Modified buffer, unregistered changes"))
    ;;               ((eq state 'unregistered) (powerline-get-icon "question" "?" "Unregistered file in VCS"))
    ;;               ((eq state 'missing)   (powerline-get-icon "exclamation" "⁈" "File exists only in VCS, not on the hard disk"))
    ;;               ((eq state 'ignored)   (powerline-get-icon "ban" "⏶" "ignored file in VCS"))
    ;;               ((eq state 'added)     (powerline-get-icon "plus" "＋" "File will be registered in VCS in the next commit"))
    ;;               (t " ")))
    ;;     (error (powerline-get-icon "exclamation" "⁈" (car ex)))))

    ;; (defun is-mode-p (mode)
    ;;   "Predicate to return `true' if the current buffer's major mode matches the requested MODE."
    ;;   (buffer-local-value 'major-mode (current-buffer))
    ;;   (eq major-mode model))

    ;; (defun current-ruby-mode-line ()
    ;;   "Display the Ruby version and Gemset (using RVM) if `ruby-mode' is enabled. Nil otherwise."
    ;;   (ignore-errors
    ;;     (when (is-mode-p 'ruby-mode)
    ;;       (concat (replace-regexp-in-string "ruby-" "" ruby--current-ruby)
    ;;               (when rvm--current-gemset
    ;;                 " 💎 ") rvm--current-gemset))))

    ;; (defun current-ruby-mode-line ()
    ;;   "Display the Ruby version and Gemset (using RVM) if `ruby-mode' is enabled. Nil otherwise."
    ;;   (ignore-errors
    ;;     (when (is-mode-p 'ruby-mode)
    ;;       (concat (replace-regexp-in-string "ruby-" "" rvm--current-ruby)
    ;;               (propertize " \xe92b " ; "\xe92a"
    ;;                           'face `(:family "all-the-icons" :height 1.2)
    ;;                           'display '(raise -0.1))
    ;;               (when rvm--current-gemset
    ;;                 rvm--current-gemset)))))

    ;; ;; Display the current Python virtual environment using `pyenv':
    ;; (defun current-python-mode-line ()
    ;;   "Display the Python virtual environmwnt and verison if `python-mode' is enabled. Nil otherwise."
    ;;   (ignore-errors
    ;;     (when (and (is-mode-p 'python-mode) (pyenv-mode-version))
    ;;       (convat "🐍" (pyenv-mode-version)))))

    ;; (defun current-python-mode-line ()
    ;;   "Display the Python virtual environmwnt and verison if `python-mode' is enabled. Nil otherwise."
    ;;   (ignore-errors
    ;;     (when (and (is-mode-p 'python-mode) (pyenv-mode-version))
    ;;       (concat
    ;;        (propertize "\xe928 "
    ;;                    'face `(:family "all-the-icons")
    ;;                    'display '(raise -0.1))
    ;;        (pyenv-mode-version)))))

    ;; ;; PUt everthing together, where we will either display the Ruby, Python, or if no particular language, display the eyebrowse:
    ;; (defun powerline-lang-version ()
    ;;   "docstring"
    ;;   (or (current-python-mode-line)
    ;;       (current-ruby-mode-line)
    ;;       (when (derived-mode-p 'prog-mode)
    ;;         which-func-format)
    ;;       " "))

    ;; (defun powerline-project-vc ()
    ;;   (ignore-errors
    ;;     (when (projectile-project-p)
    ;;       (propertize (projectile-project-name)
    ;;                   'help-echo (format "Base: %s"
    ;;                                      (projectile-project-root))))))
    ;; ;; Mode line format
    ;; ;; Let's put everything together into our mode-line:

    ;; (setq-default mode-line-format
    ;;               '("%e"
    ;;                 (:eval
    ;;                  (let* ((active (powerline-selected-window-active))
    ;;                         (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
    ;;                         (mode-line (if active 'mode-line 'mode-line-inactive))
    ;;                         (face1 (if active 'powerline-active1 'powerline-inactive1))
    ;;                         (face2 (if active 'powerline-active2 'powerline-inactive2))
    ;;                         (separator-left (intern (format "powerline-%s-%s"
    ;;                                                         (powerline-current-separator)
    ;;                                                         (car powerline-default-separator-dir))))
    ;;                         (separator-right (intern (format "powerline-%s-%s"
    ;;                                                          (powerline-current-separator)
    ;;                                                          (cdr powerline-default-separator-dir))))
    ;;                         (lhs (list
    ;;                               ;; Section 1: File status and whatnot
    ;;                               (powerline-raw (powerline-modified) face1 'l)
    ;;                               (powerline-raw-mode-line-client face1 'l)
    ;;                               (powerline-raw " " face 'l)

    ;;                               ;;Section 2: ( Buffer Name ) ... bright
    ;;                               (funcall separator-right face1 mode-line)
    ;;                               (powerline-buffer-id mode-line-buffer-id 'l)
    ;;                               (powerline-raw " " mode-line)
    ;;                               (funcall separator-left mode-line face1)

    ;;                               ;; Section 3: Git ... dark
    ;;                               (powerline-narrow face1 'l)
    ;;                               (powerline-raw " " face1)
    ;;                               (powerline-raw (powerline-project-vc) face1 'l)
    ;;                               (powerline-vc face1 'l)))

    ;;                         (rhs (list (powerline-raw global-mode-string face1 'r)
    ;;                                    ;; Section 1: Language-specific .. optional
    ;;                                    (powerline-raw (powerline-lang-version) face1 'r)))

    ;;                         (center (list (powerline-raw " " face1)
    ;;                                       (funcall separator-left face1 face2)
    ;;                                       (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
    ;;                                         (powerline-raw erc-modified-channels-object face2 'l))
    ;;                                       (powerline-major-mode face2 'l)
    ;;                                       (powerline-process face2)
    ;;                                       (powerline-raw " :" face2)
    ;;                                       (powerline-minor-modes face2 'l)
    ;;                                       (powerline-raw " " face2)
    ;;                                       (funcall separator-right face2 face1))))
    ;;                    (concat (powerline-render lhs)
    ;;                            (powerline-fill-center face1 (/ (powerline-width center) 2.0))
    ;;                            (powerline-render center)
    ;;                            (powerline-fill face1 (powerline-width rhs))
    ;;                            (powerline-render rhs))))))


    ;; (message "Modeline Completed")
#+end_src

#+RESULTS:
: Modeline Completed

** Font

#+begin_src emacs-lisp
  (when *is-a-mac*
    (progn
      (set-face-attribute 'default nil :height 130 :weight 'normal :family "Cascadia Code PL")
      (message "Font set to Cascadia")))
  (when *is-a-linux*
    (progn
      (set-face-attribute 'default nil :height 110 :weight 'normal :family "Source Code Pro")))
  ;; this is a ligiture thing...
  (if (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode))

  ;; kinda stupid not to take advantage of the advanced font features when available

  (defun dpy/push-to-prettify-alist ()
	"Push a bunch of symbols to the prettify alist."
	(push '("!="     . ?≠) prettify-symbols-alist)
	(push '("<="     . ?≤) prettify-symbols-alist)
	(push '(">="     . ?≥) prettify-symbols-alist)
	(push '("=>"     . ?⇒) prettify-symbols-alist)
	(push '(">="     . ?⇐) prettify-symbols-alist)
	(push '("sum"    . ?Σ) prettify-symbols-alist)
	(push '("**2"    . ?²) prettify-symbols-alist)
	(push '("**3"    . ?³) prettify-symbols-alist)
	(push '("None"   . ?∅) prettify-symbols-alist)
	(push '("pi"     . ?π) prettify-symbols-alist)
	(push '("lambda" . ?λ) prettify-symbols-alist))

  (add-hook 'after-init-hook (lambda ()
			      'dpy/push-to-prettify-alist))
  (add-hook 'prog-mode-hook #'prettify-symbols-mode)
  (add-hook 'org-mode-hook  #'prettify-symbols-mode)

  (message "Fonts Completed")
#+end_src
** Delight
Delight, Diminish, Minions all serve the same purpose: ditch or minimize the impact of minor modes on the mode line:
#+begin_src emacs-lisp
  (use-package delight
    :ensure t
    :config
    (delight '((lisp-interaction-mode "𝐿𝐼" :major)
               (go-mode "𝐺𝑂" :major)
               (projectile-mode " 𝑝𝑟𝑜𝑗"projectile)
               (company-box-mode nil  company-box)
               (IBuffer " 𝑖𝑏𝑢𝑓𝑓" ibuffer)
               (ivy-mode " 𝑖𝑣𝑦" ivy)
               (ivy-posframe-mode " 𝑖𝑣𝑦-𝑝" ivy-posframe)
               (Auto-Sudoedit-mode " 𝑠𝑢𝑑𝑜" ASE)
               (ws-butler-mode " 𝑤𝑠" ws-butler)
               (flycheck-mode " ✔" flycheck)
               (flyspell-mode " 𝑆𝑃" flyspell)
               (company-mode " Ⓒ" company)
               (elpy-mode " 𝑒𝑙𝑝𝑦" elpy)
               (gcmh-mode " 𝐺𝐶" gcmh)
               (undo-tree-mode " 𝑢𝑑𝑡" undo-tree)
               (beacon-mode nil beacon)
               (which-key-mode nil which-key))))
    (message "Delight Completed")
#+end_src
** Kill buffer
This is a customization to NOT kill the scratch buffer by accident
#+begin_src emacs-lisp
  (defadvice kill-buffer (around kill-buffer-around-advice activate)
      "don't kill `scratch', just bury it"
      (let ((buffer-to-kill (ad-get-arg 0)))
        (if (equal buffer-to-kill "*scratch*")
            (bury-buffer)
          ad-do-it)))
  (message "Kill Buffer Completed")
#+end_src
* Navigation
** Beacon
Beacon is an awesome itsy package that simply highlights the current row when you switch windows/frames:
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (setq beacon-color "#ff8c00")
    (setq beacon-blink-duration 0.2)
    (setq beacon-size 35)
    (setq beacon-blink-delay 0.3))

  (beacon-mode 1)

  (message "Beacon Completed")
#+end_src
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command]  . helpful-command)
    ([remap describe-key]      . helpful-key))
  (message "Helpful Completed")
#+end_src
** Counsel/Ivy/Swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
  (use-package ivy
    :ensure t)
  (use-package swiper
    :ensure t
    :bind (("C-s"        . swiper)
           ("M-x"        . counsel-M-x)
           ("C-x C-f"    . counsel-find-file)
           ("C-x b"      . ivy-switch-buffer))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t
            enable-recursive-minibuffers t
            ivy-count-format "%d/%d "
            projectile-completion-system 'ivy
            counsel-grep-base-command "rg -i -M 120 --no-heading --line-number --color never %s %s"
            counsel-find-file-ignore-regexp (rx (or (group string-start (char ".#"))
                                                    (group (char "~#") string-end)
                                                    (group ".elc" string-end)
                                                    (group ".pyc" string-end))))))
  (use-package ivy-rich
    :ensure t
    :after (ivy all-the-icons)
    :init
    ;; define function for getting the icons
     ;; define function for getting the icon
      (defun ivy-rich-switch-buffer-icon (candidate)
        (with-current-buffer (get-buffer candidate)
          (let ((icon (all-the-icons-icon-for-mode major-mode)))
            (if (symbolp icon)
                (all-the-icons-icon-for-mode 'fundamental-mode)
              icon))))

      ;; redefining this here to change the switch-buffer widths; better max lengths
      ;; for my screen
      ;; (setq-default
      ;;  ivy-rich-display-transformers-list
      ;;  '(ivy-switch-buffer
      ;;    (:columns
      ;;     ((ivy-rich-switch-buffer-icon (:width 4))
      ;;      ;; return the candidate itself
      ;;      (ivy-rich-candidate (:width 40))
      ;;      ;; return the buffer size
      ;;      ;; return the buffer indicators
      ;;      (ivy-rich-switch-buffer-indicators
      ;;       (:width 4 :face error :align right))
      ;;      ;; return the majro mode info
      ;;      (ivy-rich-switch-buffer-project (:width 20 :face warning))
      ;;      ;; return project name using `projectile'
      ;;      (ivy-rich-switch-buffer-project (:width 25 :face success))
      ;;      ;; return file path relative to project root or
      ;;      ;; `default-directory' if project is nil
      ;;      (ivy-rich-switch-buffer-path
      ;;       (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path
      ;;                       x (ivy-rich-minibuffer-width 0.3))))))
      ;;     :predicate
      ;;     (lambda (cand) (get-buffer cand)))

      ;;  counsel-M-x
      ;;  (:columns
      ;;   ;; the original transformer
      ;;   ((counsel-M-x-transformer (:width 40))
      ;;    ;; return the docstring of the command
      ;;    (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))

      ;;  counsel-describe-function
      ;;  (:columns
      ;;   ;; the original transformer
      ;;   ((counsel-describe-function-transformer (:width 40))
      ;;    ;; return the docstring of the function
      ;;    (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))

      ;;  counsel-describe-variable
      ;;  (:columns
      ;;   ;; the original transformer
      ;;   ((counsel-describe-variable-transformer (:width 40))
      ;;    ;; return the docstring of the variable
      ;;    (ivy-rich-counsel-docstring (:face font-lock-doc-face))))

      ;;  counsel-recentf
      ;;  (:columns
      ;;   ;; return the canidate itself
      ;;   ((ivy-rich-canidate (:width 0.8))
      ;;    ;; return the lats modified time of the file
      ;;    (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))))

      ;; (setq-default ivy-rich-path-style 'abbreviate)

      ;; :config
      (ivy-rich-mode))

  (use-package ivy-posframe
    :ensure t
    :after ivy
    :custom
    (ivy-posframe-width 80)
    (ivy-posframe-min-width 80)
    (ivy-posframe-height 10)
    (ivy-posframe-min-height 10)
    (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    :config
  ;;  (setq ivy-posframe-parameters '((parent-frame .nil)
  ;;                                  (left-fringe . 8)
  ;;                                  (right-fringe . 8)))
    (ivy-posframe-mode))

  (message "Ivy/Councel/Swiper Completed")
#+end_src
** Grep
Use ripgrep - best out there at this time
#+begin_src emacs-lisp
  (use-package ripgrep
    :ensure t
    :commands ripgrep-regexp
    :if (executable-find "rg"))

  (message "Ripgrep Completed")
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t)
(message "MC Completed")
#+end_src
** Switch Window
A couple of custom functions to have the cursor follow when you open a new window + switch window which allows you to choose a character instead of having to C-o your way through all open windows:
#+begin_src emacs-lisp
  (defun dpy/split-and-follow-vertically ()
    "Split the window vertically and have the mark follow."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (defun dpy/split-and-follow-horizontally ()
    "Split the window horizontally and have the mark follow."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (use-package switch-window
    :ensure t
    :bind
    ("C-x o" . switch-window)
    ("C-x 1" . switch-window-then-maximize)
    ("C-x 2" . dpy/split-and-follow-horizontally)
    ("C-x 3" . dpy/split-and-follow-vertically)
    ("C-x 0" . switch-window-then-delete)
    :config
    (setq-default switch-window-timeout 10)      ; wait 10 seconds, then revert
    (setq switch-window-shortcut-style 'qwerty) ; label windows with homebase char
    (setq switch-window-minibuffer-shortcut ?z) ; reserve "z" for the mini-buffer
    (setq switch-window-querty-shortcuts '("a" "s" "d" "f" "j" "k" "l"))
    ;; Icons from https://www.techonthenet.com/clipart/keyboard/
    (setq switch-window-image-directory (concat user-emacs-directory "images/"))
    (setq switch-window-shortcut-appearance 'image))

  ;; Another thing that bothers me; focus should follow new help windows:
  (setq help-window-select t)

  (message "Switch-Window Completed")
#+end_src
** Undo Tree
#+begin_src emacs-lisp
(use-package undo-tree
:ensure t
:config
(global-undo-tree-mode))
(message "Undo Completed")
#+end_src
** Uniquify
This package makes sure each buffer is uniquily named:
#+begin_src emacs-lisp
  (use-package uniquify
    :init
    (setq uniquify-buffer-name-style   'reverse
          uniquify-separator           " . "
          uniquify-after-kill-buffer-p   t
          uniquify-ignore-buffers-re   "\\*"))
(message "Uniquify Completed")
#+end_src
** Which Key
Awesome program that prompts you for potential keystrokes after you hit a control combo, but can't remember what the key was:
#+begin_src emacs-lisp
(use-package which-key
:ensure
:config
(which-key-mode))
(message "Which Key Completed")
#+end_src
* Dired
** Dired itself
#+begin_src emacs-lisp
  (use-package dired
    :init
    (let ((gls (executable-find "gls")))
      (when gls (setq insert-directory-program gls)))
    (setq dired-recursive-deletes 'top)
    (setq direc-dwim-target t)
    :bind (:map dired-mode-map
                (([mouse-2] . dired-find-file)
                 ("C-c C-p" . wdired-change-to-wdired-mode)))
    :config
    (put 'dired-find-alternate-file 'disabled nil))

  (use-package all-the-icons-dired
    :ensure t)
  (use-package dired-single
    :ensure t)
  (message "Dired Completed")
#+end_src
** Diredfl
This is a re-package of dired+ by Purcell. Simply makes for a more colorful dired:
#+begin_src emacs-lisp
  (use-package diredfl
    :ensure t
    :after dired
    :hook
    ((after-init . diredfl-global-mode)))
(message "Diredfl Completed")
#+end_src
** Dired filter
#+begin_src emacs-lisp
  (use-package dired-filter
    :ensure t
    :after dired
    :bind (:map dired-mode-map
                ("/" . dired-filter-map))
    :hook
    ((dired-mode . dired-filter-mode)
     (dired-mode . dired-filter-group-mode))
    :init
    (setq dired-filter-revert 'never
            dired-filter-group-saved-groups
            '(("default"
               ("Git"
                (directory . ".git")
                (file . ".gitignore"))
               ("Directory"
                (directory))
               ("PDF"
                (extension . "pdf"))
               ("LaTex"
                (extension "tex" "bib"))
               ("Source"
                (extension "c" "cpp" "rb" "py" "r" "cs" "el" "lisp" "html" "js" "css" "go"))
               ("Doc"
                (extension "md" "rst" "txt"))
               ("Org"
                (extension . "org"))
               ("Archives"
                (extension "zip" "rar" "gz" "bz2" "tar"))
               ("Images"
                (extension "jpg" "JPG" "webp" "png" "PNG" "jpeg" "JPEG" "bmp" "BMP" "tiff" "TIFF" "gif" "GIF"))))))

    (when (executable-find "avfsd")
      (use-package dired-avfs
        :ensure t))
(message "Dired filter Completed")
#+end_src
** Dired Rainbow
#+Begin_src emacs-lisp
(use-package dired-rainbow
    :ensure t
    :after dired
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html        "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml         "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document    "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown    "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database    "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media       "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image       "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log         "#c17d11" ("log"))
    (dired-rainbow-define shell       "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled    "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable  "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed  "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged    "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted   "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts       "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition   "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc          "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
(message "Dired Completed")
#+End_src
* Development
** Universal
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(global-font-lock-mode)
(setq font-lock-maximum-decoration t)
(message "Universal Completed")
#+end_src
** Dash
Dash is a large set of libraries usable throughout Emacs
#+begin_src emacs-lisp
(require 'dash)
(use-package dash-functional
  :ensure t
  :after dash)
(use-package counsel-dash
  :ensure t
  :after dash)
(message "Dash Completed")
#+end_src
** Projectile
Projectile is a project management package allowing you to see your whole project (i.e. Java, go etc..) and move around in there more easily.
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :custom ((projectile-completion-system 'ivy))
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (projectile-global-mode)
    (when (file-directory-p "~/Projects/Code")
     (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))
  (require 'projectile)
  (use-package counsel-projectile
    :ensure t)
  (message "Projectile Completed")
#+end_src
** Magit
Magit alone is a compelling reason to use emacs
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq git-commit-summary-max-length 50))
  (message "Magit Completed")
#+end_src
** WS-Butler
#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'ws-butler-mode)
  (add-hook 'text-mode-hook #'ws-butler-mode))
(message "WS-Butler Completed")
#+end_src
** Paren Management
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (setq sp-escape-quotes-after-insert t))

  (setq show-paren-delay 0)
  (show-paren-mode)

  (require 'paren)

  (electric-indent-mode)
  (electric-layout-mode)
  (electric-pair-mode)
  (setq electric-pair-preserve-balance              t
        electric-pair-delete-adjacent-pairs         t
        electric-pair-open-newline-between-pairs  nil)
  (message "Parens Completed")
#+end_src
** Line numbering
Line numbering is essential for coding, but gets in the way in other modes
#+begin_src emacs-lisp
  (column-number-mode)
  (require 'display-line-numbers)
  (defcustom display-line-numbers-exempt-modes
    '(vterm-mode
      eshell-mode
      shell-mode
      term-mode
      ansi-term-mode treemacs-mode)
    "Major modes on which to disable the linum mode, exempts them from global requirement."
    :group 'display-line-numbers
    :type 'list
    :version "green")

  (defun display-line-numbers--turn-on ()
    "turn on line numbers but exempting certain major modes defined in `display-line-numbers-exempt-modes'."
    (if (and
         (not (member major-mode display-line-numbers-exempt-modes))
         (not (minibufferp)))
        (display-line-numbers-mode)))

  (global-display-line-numbers-mode)

#+end_src
** Highlighting
#+begin_src emacs-lisp
  (use-package highlight-numbers :ensure t)
  (use-package highlight-escape-sequences :ensure t)
  (add-hook 'prog-mode-hook 'highlight-numbers-mode)
  (add-hook 'prog-mode-hook 'hes-mode)
  (hes-mode)

  (message "Highlighting Completed")

#+end_src
** Company
Need to load this so eglot can pick it up
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :diminish
    :bind (("M-/"    . company-complete)
           ("C-M-/"  . company-files)
           :map company-active-map
           ("<tab>"  . company-complete)
           ("C-n"    . company-select-next)
           ("C-p"    . company-select-previous)
           :map lsp-mode-map
           ("<tab>"  . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length      2)
    (company-dabbrev-other-buffers      t)
    (company-dabbrev-code-other-buffers t)
    (company-complete-number            t)
    (company-show-numbers               t)
    (company-selection-wrap-around      t)
    (company-dabbrev-downcase         nil)
    (company-dabbrev-ignore-case        t)
    (company-idle-delay                 .4)
    :config
    (global-company-mode 0))

  (message "Company Completed")
#+end_src
* Languages
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
  (add-hook 'python-mode-hook 'eglot-ensure)
#+end_src
** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :disabled
    :ensure t
    :commands (lsp lsp-deferred)
    :custom
    (lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src
** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :custom
    (typescript-indent-level 2))
#+end_src
** Go
- install go imports
#+begin_src shell
## go get golang.org/x/tools/cmd/goimports
#+end_src
- install godef
#+begin_src shell
## go -get -v github.com/rogeppe/godef
#+end_src
- install guru
#+begin_src shell
## go get -v golang.org/x/tools/cmd/guru
#+end_src
#+begin_src emacs-lisp
    (use-package go-mode
      :ensure t
      :mode ("\\.go\\'" . go-mode)
      :bind ((:map go-mode-map
                   ("kbd M-," . 'godef-jump)
                   ("kbd <F9>" . 'compile))))
    ;;   :config
    ;;   (setq gofmt-command "goimports")
    ;;   (add-hook 'before-save-hook 'gofmt-before-save)
    ;;   (setq compile-command "echo Build... && go builld -v && echo Testing... && go test -v && echo Linter... && go lint"))

    ;; ;; Smaller compilation buffer
    ;; (setq compilation-window-height 14)
    ;; (defun dpy/my-compilation-hook ()
    ;;   (when (not (get-buffer-window "*compilation*"))
    ;;     (save-selected-window
    ;;       (save-excursion
    ;;         (let* ((w (split-window-vertically))
    ;;                (h (window-height w)))
    ;;           (select-window w)
    ;;           (switch-to-buffer "*compilation*")
    ;;           (shrink-window (- h compilation-window-height)))))))
    ;; (add-hook 'compilation-mode-hook 'dpy/my-compilation-hook)
  (message "Go Completed")
#+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)
  (message "JSON Completed")
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
(message "YAML Completed")
#+end_src
** Python
#+begin_src emacs-lisp
  (message "Python Completed")
#+end_src
* Terminal Emulators and shells
** Term mode
#+begin_src emacs-lisp
  (use-package term
    :custom
    (explicit-shell-file-name "zsh")
    (term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :ensure t
    :hook (term-mode . eterm-256color-mode))
#+end_src
** vterm
#+begin_src emacs-lisp
    (use-package vterm
      :ensure t
      :commands vterm
      :custom
      (vterm-shell "zsh")
      (vterm-max-scrollback 10000))
#+end_src
** EShell
#+begin_src emacs-lisp
    (use-package eshell-git-prompt
      :ensure t)

    (defun dpy/configure-eshell ()
      "Save comand history when commands are entered."
      (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
      ;; Truncate buffer for performance
      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

      (setq eshell-history-size          10000
            eshell-buffer-maximum-lines  10000
            eshell-hist-ignoredups           t
            eshell-scroll-to-bottom-on-input t))

    (use-package eshell
      :hook (eshell-first-time-mode . dpy/configure-eshell)
      :config


      (with-eval-after-load 'esh-opt
        (setq eshell-destroy-buffer-when-process-dies t)
        (setq eshell-visual-commands '("htop" "zsh" "vim" "ssh")))

      (eshell-git-prompt-use-theme 'robbyrussell))
#+end_src
* Tramp
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")

  (use-package auto-sudoedit
    :ensure t
    :config
    (auto-sudoedit-mode 1))
#+end_src
* Org Mode
** Variables
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq-default org-src-fontify-natively 1)
    (add-hook 'org-mode-hook '(lambda ()
                                ;; make the lines in a buffer wrap around the edge of the screen
                                (visual-line-mode)
                                (org-indent-mode))))
#+END_SRC
** Org languages
#+begin_src emacs-lisp
(use-package ob-go
  :ensure t)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python     . t)
   (perl       . t)
   (go         . t)
   (shell      . t)))
#+End_src
** Structured Templates

#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (setq org-src-window-setup 'split-window-below)
  (message "Structured Templates Completed")
#+END_SRC
** Fonts and Bullets
Use bullet characters instead of asterics, plus set the head font sizes to something more palatable. A fair amount of insperation has been taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs][this blog post]]
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remote-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :family "CascadiaCodePL" :weight 'regular :height (cdr face)))

  ;; Make sure org-indent face is available
  (require 'org-indent)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-indent nil   :inherit '(org-hide fixed-pitch))
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

* End
#+begin_src emacs-lisp
  (message "Everything Completed")
#+end_src
