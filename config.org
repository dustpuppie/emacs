* Base Modifications
These are basic modifications to the vanilla emacs
#+BEGIN_SRC emacs-lisp
(defvar user-email-address)
(defvar user-full-name)

(setq user-full-name "Dan Baggeroer"
      user-email-address "dbaggero@protonmail.com")

(message "Personal Info Complete")
#+END_SRC

* Configure Leaf
#+Begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org"    . "https://orgmode.org/elpa/")
			 ("melpa"  . "https://melpa.org/packages/")
			 ("gnu"    . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    ;; Leaf keywords
    (leaf leaf-keywords
      :doc "Use leaf as a package manager"
      :url "https://github.com/conao3/leaf.el"
      :ensure t
      :init
      (leaf el-get
	:ensure t
	:custom
	(el-get-notify-type         . 'message)
	(el-get-git-shalloow-clone  . t))
      (leaf hydra :ensure t)
      :config
      (leaf-keywords-init)))

  ;; Compile
  (eval-and-compile
    (leaf *byte-compile
      :custom
      (byte-compile-warnings . '(not free-vars))
      (debug-on-error        . nil)))
  (leaf *native-compile
    :doc "Native compile by gccemacs"
    :url "https://www.emacswiki.org/emacs/GccEmacs"
    :if (and (fboundp 'native-comp-available-p)
	     (native-comp-available-p))
    :custom
    (comp-deferred-compilation . nil)
    (comp-speed                . 5)
    (comp-num-cpus             . 4)
    :config
    (native-compile-async "~/.emacs.d/early-init.el" 4 t)
    (native-compile-async "~/.emacs.d/init.el" 4 t)
    (native-compile-async "~/.emacs.d/elpa/" 4 t)
    (native-compile-async "~/.emacs.d/el-get" 4 t))

  (leaf package-utils
    :doc "Interactive package manager"
    :url "https://github.com//Silex/package-utils"
    :ensure t)
#+End_src

#+Begin_src emacs_lisp
  
#+End_Src
* No littering
Clean up backup files
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t
    :config
    (setq auto-save-file-name-transforms
	  `((".*" , (no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el")))
#+END_SRC

* Global Keybindings
#+begin_src emacs-lisp
  (defun dpy/config-edit ()
    "Go directly to the main configuration file."
    (interactive)
    (find-file (concat user-emacs-directory "config.org")))

  (defun dpy/config-reload ()
    "Reload the main configuration file without having to restart Emacs."
    (interactive)
    (message "*** RELOAD ***")
    (org-babel-load-file (expand-file-name (concat user-emacs-directory "config.org"))))

  (global-unset-key (kbd "C-x ;"))
  (global-unset-key (kbd "C-x f"))
  (global-set-key (kbd "C-c r") 'dpy/config-reload)
  (global-set-key (kbd "C-c e") 'dpy/config-edit)
  (global-set-key (kbd "C-:") 'toggle-truncate-lines)
  (global-set-key (kbd "M-:") 'comment-dwim)
  (global-set-key (kbd "C-x k") #'kill-this-buffer)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "<f5>") 'mu4e)
  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-c C-\\") 'comment-or-uncomment-region)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "<f6>") 'flyspell-word)
  (global-set-key (kbd "C-<f6>") 'flyspell-buffer)
  (global-set-key (kbd "<f7>") 'vterm)
  (global-set-key (kbd "<f8>") 'eshell)

  (message "Global Variables Complete")
  #+END_SRC

* Leaf Configuration
#+BEGIN_SRC emacs-lisp

	  (leaf *encoding
	    :doc "It's time to use UTF-8"
	    :config
	    (set-locale-environment "en_US.UTF-8")
	    (prefer-coding-system          'utf-8-unix)
	    (set-default-coding-systems    'utf-8-unix)
	    (set-selection-coding-system   'utf-8-unix)
	    (set-buffer-file-coding-system 'utf-8-unix))

	    (message "UTF-8 Completed")

	  (leaf *formatting
	  :custom
	  (truncate-lines        . t)
	  (require-final-newline . t)
	  (setq tab-Width        . 2))

      (leaf *autorevert
	:doc "Revert changes if local file is updated"
	:global-minor-mode global-auto-revert-mode
	:custom (auto-revert-interval . 0.1))

      (leaf *recovery
	:doc "Save place of cursor"
	:global-minor-mode save-place-mode)

      (leaf *tramp
	:doc "Edit remote files using SSH or SCP"
	:custom
	(tramp-auto-save-directory . "~/.emacs.d/.cache/tramp/")
	(tramp-chunksize           . 2048))

      (leaf *savehist
	:doc "save history of minibuffer"
	:global-minor-mode savehist-mode)

      (leaf *recentf
	:doc "Record open files history"
	:global-minor-mode recentf-mode
	:custom
	(recentf-max-saved-items . 20000)
	(recentf-max-menu-items  . 20000)
	(recent-auto-cleanup     . 'never)
	(recentf-exclude
	 . '((expand-file-name package-user-dir)
	     ".cache"
	     "cache"
	     "bookmarks"
	     "recentf"
	     "*.png"
	     "*jpeg"
	     "org_archive"
	     "COMMIT_EDITMSG\\'")))
(message "recentf completed")
     (leaf *large-file
       :doc "Adjust large file threshold"
       :custom
       (large-file-warning-threshold . 1000000))

      ;; Basic Editing Operation
      (leaf *delsel
	:doc "Replace the region just by typing text, or delete just by hitting the DEL key"
	:global-minor-mode delete-selection-mode)
(message "delsel completed")
      (leaf undo-fu
	:doc "Redo and undo operations"
	:url "https://github.com/emacsmirror/undo-fu"
	:ensure t
	:bind
	("C-/" . undo-fu-only-undo)
	("M-/" . undo-fu-only-redo))
    (message "Basic Editing Completed")
#+END_SRC

* System Tweaks
#+begin_src emacs-lisp
  (setq config-nonexistant-file-or-buffer nil) ; just go already
  (setq save-interprogram-paste-before-kill t) ; save existing clipboard to killring before replacing it
  (setq require-final-newline               t) ; if there isn't one, add a newline at the end
  (setq inhibit-startup-message             t) ; I know what emacs is
  (setq ring-bell-function            'ignore) ; Don't ever beep. Just Don't.
  (setq visible-bell                      nil) ; Don't. Ever. Flash.
  (setq kill-do-not-save-duplicates         t) ; Just what it says
  (setq config-kill-process               nil) ; don't bother
  (setq compilation-scroll-output           t) ; scroll the compilation buffer as output appears
  (setq gnutls-min-prime-bits            4096) ; default is an absurdly small number
  (setq display-line-number-mode            t)
  (setq column-number-mode                  t)

  (random                    t) ; initialize the RNG
  (delete-selection-mode     1) ; if something is highlighted and I start typing, erase it
  (transient-mark-mode       t) ; if switching buffers, disabl former buffer's mark
  (fset 'yes-or-no-p 'y-or-n-p) ; everone hates that
  (setq-default find-file-visit-truename t) ; follow symlinks automagically
  (setq-default vc-follow-symlinks       t) ; same for git
  (defalias 'list-buffers 'ibuffer-other-window)

  ;; Global keys

#+end_src

* Window System
#+Begin_src emacs-lisp
  (leaf *adjust-frame-position
    :doc "Place the frame on the right side of the screen"
    :if (window-system)
    :config
    (set-frame-position nil (/ (display-pixel-width) 2) 0)
    (if (< (display-pixel-width) 1800)
	   (set-frame-size nil 100 63)))
  ;; (leaf *adjust-frame-position
  ;; :doc "Place frame based upon monitor size"
  ;; :config
  ;;   (defun dpy/set-initial-frame ()
  ;;   (let* ((base-factor 0.70)
  ;; 	 (a-width (* (display-pixel-width) base-factor))
  ;; 	 (a-height (* (display-pixel-height) base-factor))
  ;; 	 (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
  ;; 	 (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
  ;;     (set-frame-position (selected-frame) a-left a-top)
  ;;     (set-frame-size (selected-frame) (truncate a-width) (truncate a-height) t)))
  ;; (setq frame-resize-pixelwise t)
  ;; (dpy/set-initial-frame))
  ;; (message "Window sizing completed")
#+End_src

* Bar Modification
#+Begin_src emacs-lisp
      (when (fboundp 'tool-bar-mode)
	(tool-bar-mode -1))
      (when (fboundp 'scroll-bar-mode)
	(scroll-bar-mode -1))
      (when (fboundp 'tab-bar-mode)
	(tab-bar-mode -1))


  (message "Bars Completed")

#+End_src
* Cursors
#+Begin_Src emacs-lisp
(kill-whole-line  . t)
(track-eol        . t)
(line-move-visual . nil)

(leaf mwim
:doc "Move the cursor to the beginning/end of code or line")
:url "https://github.com/alezost/mwim.el"
:ensure t
:bind*
(("C-a" . mwim-beginning-of-code-or-line)
 ("C-e" . mwim-end-of-code-or-line))

(message "Cursor Completed")
#+End_Src_

* Window Layout
#+Begin_Src emacs-lisp
(leaf ace-window
:doc "Select window like tmux"
:url "https://github.com/abo-abo/ace-window"
:ensure t
:bind
("C-o" . ace-window)
:custom
(aw-keys. '(?j ?k ?l ?i ?o ?h ?y ?u ?p))
:custom-face
  (aw-leading-char-face . '((t (:height 4.0 :foreground "#f1fa8c")))))

(message "Window Layout Complete")
#+End_Src
* Error Checking
#+Begin_Src emacs-lisp
(leaf flycheck
:doc "Syntax checker"
  :url "https://www.flycheck.org/en/latest/"
  :ensure t
  :global-minor-mode global-flycheck-mode
  :custom
  (flycheck-display-errors-delay . 0))

;; flyspell + UI
(leaf flyspell
  :doc "Spell checker"
  :url "https://www.emacswiki.org/emacs/FlySpell"
  :ensure t
  :hook
  (prog-mode-hook . flyspell-prog-mode)
  ((markdown-mode-hook git-commit-mode-hook) . flyspell-mode)
  :custom
  (ispell-program-name . "aspell")
  (ispell-extra-args   . '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
  :custom-face
  (flyspell-incorrect  . '((t (:underline (:color "#f1fa8c" :style wave)))))
  (flyspell-duplicate  . '((t (:underline (:color "#50fa7b" :style wave))))))
(leaf flyspell-correct
  :doc "correcting misspelled words with flyspell using favourite interface"
  :url "https://github.com/d12frosted/flyspell-correct"
  :ensure t
  :bind*
  ("C-M-i" . flyspell-correct-at-point)
  :custom
  (flyspell-correct-interface . #'flyspell-correct-completing-read))

#+End_Src
* Completion
#+Begin_Src emacs-lisp
(leaf yasnippet
  :doc "Template system"
  :url "https://github.com/joaotavora/yasnippet"
  :ensure t
  :hook   (prog-mode-hook . yas-minor-mode)
  :custom (yas-snippet-dirs . '("~/.emacs.d/snippets"))
  :config (yas-reload-all))

(leaf company
  :doc "Modular in-buffer completion framework"
  :url "http://company-mode.github.io/"
  :ensure t
  :hook (prog-mode-hook . company-mode)
  :bind
  ((:company-active-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous)
    ("<tab>" . company-complete-common-or-cycle))
   (:company-search-map
    ("C-p" . company-select-previous)
    ("C-n" . company-select-next)))
  :custom
  (company-idle-delay  . 0)
  (company-echo-delay  . 0)
  (company-ignore-case . t)
  (company-selection-wrap-around . t)
  (company-minimum-prefix-length . 1)
  :custom-face
  (company-tooltip          . '((t (:background "#323445"))))
  (company-template-field   . '((t (:foreground "#ff79c6"))))
  (yas-field-highlight-face . '((t (:foreground "#ff79c6")))))
#+End_Src
* Tools
#+Begin_Src emacs-lisp
  (leaf which-key
  :doc "Shows all available key combonations"
  :url "https://github.com/justbur/emacs-which-key.el"
  :ensure t
  :config
  (which-key-mode))

    (leaf docker
    :doc "manage docker from Emacs"
    :url "https://github.com/Solex/docker.el"
    :ensure t)

    (leaf docker-tramp
      :doc "Remote development in docker container"
      :url "https://github.com/emacs-pe/docker-tramp.el"
      :ensure t)

    ;; GIT

  (leaf *git-commit-mode
  :doc "Mode for git commit message editing"
  :mode "\\COMMIT_EDITMSG\\'")
  (leaf git-modes
    :doc "Modes for git configuration files"
    :url "https://github.com/magit/git-modes"
    :ensure t)

  (leaf magit
    :doc "Complete text based user interface to Git"
    :url "https://magit.vc"
    :ensure t
    :init
    (setq magit-auto-revert-mode nil))

  (leaf git-gutter
    :doc "Show git sttus in fringe &operate hunks"
    :url "https://github.com/emacsorphanage/git-gutter"
    :ensure t
    :global-minor-mode global-git-gutter-mode
    :custom
    (git-gutter:modified-sign  . "*")
    (git-gutter:added-sign     . "+")
    (git-gutter:deleted-sign   . "-")
    :custom-face
    (git-gutter:modified . '((t (:foreground "#f1fa8c"))))
    (git-gutter:added    . '((t (:foreground "#50fa7b"))))
    (git-gutter:deleted  . '((t (:foreground "#ff79c6")))))
    
    (message "Tools Complete")
    #+End_Src
* Line numbers
#+Begin_src emacs-lisp
    (column-number-mode)
    (require 'display-line-numbers)
  (defcustom display-line-numbers-exempt-modes
    '(vterm-mode
      eshell-mode
      shell-mode
      pdf-view-mode
      man-mode
      ansi-term-mode
      treemacs-mode)
    "Major modes where linum mode should be disabled; exempts them from global requirement"
    :group 'display-line-numbers
    :type 'list
    :version "green")

  (defun display-line-numbers--turn-on ()
    "turn-on line numbers but exempting certain major modes defined in `display-line-numbers-exempt-mode"
    (if (and
	 (not (member major-mode display-line-numbers-exempt-modes))
	 (not (minibufferp)))
	(display-line-numbers-mode)))
  (global-display-line-numbers-mode)
  (message "Line Numbering Complete")
#+End_src
* Fonts
#+Begin_src emacs-lisp
  (message "Fonts starting")
  (set-face-attribute 'default nil :height 130 :weight 'normal :family "Source Code Pro")
    (message "Font set to Source Code Pro")
  ;; this is a ligiture thing...
  (if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode))

  (defun dpy/push-to-prettify-alist ()
	"Push a bunch of symbols to the prettify alist."
	(push '("!="     . ?≠) prettify-symbols-alist)
	(push '("<="     . ?≤) prettify-symbols-alist)
	(push '(">="     . ?≥) prettify-symbols-alist)
	(push '("=>"     . ?⇒) prettify-symbols-alist)
	(push '(">="     . ?⇐) prettify-symbols-alist)
	(push '("sum"    . ?Σ) prettify-symbols-alist)
	(push '("**2"    . ?²) prettify-symbols-alist)
	(push '("**3"    . ?³) prettify-symbols-alist)
	(push '("None"   . ?∅) prettify-symbols-alist)
	(push '("pi"     . ?π) prettify-symbols-alist)
	(push '("lambda" . ?λ) prettify-symbols-alist))

  (add-hook 'after-init-hook (lambda ()
			      'dpy/push-to-prettify-alist))
  (add-hook 'prog-mode-hook #'prettify-symbols-mode)
  (add-hook 'org-mode-hook  #'prettify-symbols-mode)

  (message "Fonts Completed")
#+End_src
* Delight
#+Begin_Src emacs-lisp
  (leaf delight
  :doc "Cleans up mode line"
  :url "https://savannah.nongru.org/projects/delight"
  :config
    (delight '((lisp-interaction-mode "𝐿𝐼" :major)
               (go-mode "𝐺𝑂" :major)
               (projectile-mode " 𝑝𝑟𝑜𝑗"projectile)
               (company-box-mode nil  company-box)
               (IBuffer " 𝑖𝑏𝑢𝑓𝑓" ibuffer)
               (ivy-mode " 𝑖𝑣𝑦" ivy)
               (ivy-posframe-mode " 𝑖𝑣𝑦-𝑝" ivy-posframe)
               (Auto-Sudoedit-mode " 𝑠𝑢𝑑𝑜" ASE)
               (ws-butler-mode " 𝑤𝑠" ws-butler)
               (flycheck-mode " ✔" flycheck)
               (flyspell-mode " 𝑆𝑃" flyspell)
               (company-mode " Ⓒ" company)
               (elpy-mode " 𝑒𝑙𝑝𝑦" elpy)
               (gcmh-mode " 𝐺𝐶" gcmh)
               (undo-tree-mode " 𝑢𝑑𝑡" undo-tree)
               (beacon-mode nil beacon)
               (which-key-mode nil which-key))))
    (message "Delight Completed")
  ;; Kill scratch buffer
  ;; This is a customization to NOT kill the scartch buffer by accident
  (defadvice kill-buffer (around kill-buffer-around-advice activate)
    "don't kill 'scratch', just bury it"
    (let ((buffer-to-kill (ad-get-arg 0)))
      (if (equal buffer-to-kill "*scratch*")
      (bury-buffer)
      ad-do-it)))
  (message "Kill buffer Completed")
  
#+End_Src

* ModeLine Config
#+Begin_src emacs-lisp
      (leaf all-the-icons
      :ensure t)
      (leaf smart-mode-line
	:ensure t
	:config
	(setq sml/no-confirm-load-theme t)
	(sml/setup)
	(sml/apply-theme 'respectful)   ; respect the theme colors
	(setq sml/mode-width 'right
	      sml/name-width 60)
	(setq-default mode-line-format
		      `("%e",
			mode-line-front-space
			mode-line-mule-info
			mode-line-client
			mode-line-modified
			mode-line-remote
			mode-line-frame-identification
			mode-line-buffer-identification
			sml/pos-id-separator
			(vc-mode vc-mode)
			" "
		      ;; mode-line-position
			sml/pre-modes-separator
			mode-line-modes
			" "
			mode-line-misc-info)))



      (defvar boon-command-state)
      (defvar boon-insert-state)
      (defvar boon-special-state)
      (defvar boon-off-state)
    (leaf mode-icons
      :ensure t
      :config (mode-icons-mode))


    (message "Modeline Completed")
#+End_src

* Mac specific

#+Begin_src emacs-lisp
  (leaf *pbcopy-and-pbpaste
  :if (equal system-type 'darwin)
 (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))
  
  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))
  
  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)
  :custom
  (mac-option-modifier          . 'super)
  (mac-command-modifier         . 'meta)
  (interprogram-cut-function    . 'paste-to-osx)
  (interprogram-paste-function  . 'copy-from-osx))

  (leaf exec-path-from-shell
    :doc "Share PATH from shell environment variables"
    :url "https://github.com/purcell/exec-path-from-shell"
    :ensure t
    :if (and (equal system-type 'darwin) (window-system))
    :custom
    (exec-path-from-shell-check-startup-files . nil)
    (exec-path-from-shell-variables . '("PATH" "GOPATH" "LC_LANG" "LANG"))
    :config
    (exec-path-from-shell-initialize))
  (message "Mac Specific Completed")

#+End_src 

* Theme(s)
#+Begin_src emacs-lisp

       (leaf doom-themes
	 :doc "Megapack of themes"
	 :url "https://github.com/doomemacs/themes"
	 :ensure t
	 :defer-config
	 (let ((display-table (or standard-display-table (make-display-table))))
	   (set-display-table-slot display-table 'vertical-border (make-glyph-code ?│))
	   (setq standard-display-table display-table))
	 :config
	 (load-theme 'doom-dracula t)
	 (doom-themes-neotree-config)
	 (doom-themes-org-config))

       (leaf doom-theme-for-term
	 :doc "Show repository root in NeoTree"
	 :unless (window-system)
	 :preface
	 (defun doom-themes-neotree-insert-root-for-term (node)
	   ;; insert icon and project name
	   (insert
	    (propertize
	     (concat (propertize " " 'face 'neo-root-dir-face)
		     (or (neo-path--file-short-name node) "-")
		     "\n")
	     'face `(:inherit ,(append (if doom-themes-neotree-enable-variable-pitch '(variable-pitch))
				       '(neo-root-dir-face))))))
	 :advice
	 (:override doom-themes-neotree-insert-root doom-themes-neo-tree-insert-root-for-term))

      ;; (leaf vscode-dark-plus-theme
      ;;   :doc "original vscode dark theme"
      ;;   :url "https://github.com/emacsmirror/vscode-dark-plus-theme"
      ;;   :ensure t
      ;;   :config
      ;;   (setq custom-safe-theme t)
      ;;   (load-theme 'vscode-dark-plus t))

  (progn
    (mapc #'disable-theme custom-enabled-themes)
    (add-to-list 'load-path "/Users/dbaggero/.emacs.d/ef-themes/")
    (require 'ef-themes)
    (load-theme 'ef-autumn t t)
    (load-theme 'ef-dark t t)
    (load-theme 'ef-day t t)
    (load-theme 'ef-light t t)
    (load-theme 'ef-night t t)
    (load-theme 'ef-spring t t)
    (load-theme 'ef-summer t t)
    (load-theme 'ef-winter t t)

    (mapcar (lambda (theme)
	      (add-to-list
	       'custom-theme-load-path
	       (concat "/Users/dbaggero/.emacs.d/ef-themes/" (symbol-name theme "-theme.el")))
	      (ef-themes--list-enabled-themes))
	    (call-interactively #'ef-themes-select)))
    (message "Theme Completed")

  
;; Hydra Templates -------------------------------------------------------------------------

(leaf *hydra-goto
  :doc "Search and move cursor"
  :bind ("M-j" . *hydra-goto/body)
  :pretty-hydra
  ((:title " Goto" :color blue :quit-key "q" :foreign-keys warn :separator "-")
   ("Got"
    (("i" avy-goto-char       "char")
     ("t" avy-goto-char-timer "timer")
     ("w" avy-goto-word-2     "word")
     ("j" avy-resume "resume"))
    "Line"
    (("h" avy-goto-line        "head")
     ("e" avy-goto-end-of-line "end")
     ("n" consult-goto-line    "number"))
    "Topic"
    (("o"  consult-outline      "outline")
     ("m"  consult-imenu        "imenu")
     ("gm" consult-global-imenu "global imenu"))
    "Error"
    ((","  flycheck-previous-error "previous" :exit nil)
     ("."  flycheck-next-error "next" :exit nil)
     ("l" consult-flycheck "list"))
    "Spell"
    ((">"  flyspell-goto-next-error "next" :exit nil)
     ("cc" flyspell-correct-at-point "correct" :exit nil)))))

(leaf *hydra-toggle
  :doc "Toggle functions"
  :bind ("M-t" . *hydra-toggle/body)
  :pretty-hydra
  ((:title " Toggle" :color blue :quit-key "q" :foreign-keys warn :separator "-")
   ("Basic"
    (("v" view-mode "view mode" :toggle t)
     ("w" whitespace-mode "whitespace" :toggle t)
     ("W" whitespace-cleanup "whitespace cleanup")
     ("r" rainbow-mode "rainbow" :toggle t)
     ("b" beacon-mode "beacon" :toggle t))
    "Line & Column"
    (("l" toggle-truncate-lines "truncate line" :toggle t)
     ("n" display-line-numbers-mode "line number" :toggle t)
     ("f" display-fill-column-indicator-mode "column indicator" :toggle t)
     ("c" visual-fill-column-mode "visual column" :toggle t))
    "Highlight"
    (("h" highlight-symbol "highligh symbol" :toggle t)
     ("L" hl-line-mode "line" :toggle t)
     ("t" hl-todo-mode "todo" :toggle t)
     ("g" git-gutter-mode "git gutter" :toggle t)
     ("i" highlight-indent-guides-mode "indent guide" :toggle t))
    "Window"
    (("t" toggle-window-transparency "transparency" :toggle t)
     ("m" toggle-window-maximize "maximize" :toggle t)
     ("p" presentation-mode "presentation" :toggle t)))))
(leaf *hydra-toggle-markdown1
  :doc "Toggle functions for Markdown"
  :bind
  (:markdown-mode-map
   :package markdown-mode
   ("M-t" . *hydra-toggle-markdown1/body))
  :pretty-hydra
  ((:title " Toggle" :color blue :quit-key "q" :foreign-keys warn :separator "-")
   ("Basic"
    (("w" whitespace-mode "whitespace" :toggle t)
     ("W" whitespace-cleanup "whitespace cleanup")
     ("l" hl-line-mode "line" :toggle t)
     ("g" git-gutter-mode "git gutter" :toggle t))
    "Markdown"
    (("v" markdown-view-mode "view mode")
     ("u" markdown-toggle-markup-hiding "markup hiding" :toggle t)
     ("l" markdown-toggle-url-hiding "url hiding" :toggle t))
    "Line & Column"
    (("l" toggle-truncate-lines "truncate line" :toggle t)
     ("i" display-fill-column-indicator-mode "column indicator" :toggle t)
     ("c" visual-fill-column-mode "visual column" :toggle t))
    "Window"
    (("t" toggle-window-transparency "transparency" :toggle t)
     ("m" toggle-window-maximize "maximize" :toggle t)
     ("p" presentation-mode "presentation" :toggle t)))))

(leaf *hydra-search
  :doc "Search functions"
  :bind
  ("M-s" . *hydra-search/body)
  :pretty-hydra
  ((:title " Search" :color blue :quit-key "q" :foreign-keys warn :separator "-")
   ("Buffer"
    (("l" consult-line "line")
     ("o" consult-outline "outline")
     ("m" consult-imenu "imenu"))
    "Project"
    (("f" affe-find "find")
     ("r" affe-grep "grep"))
    "Document"
    (("df" consult-find-doc "find")
    ("dd" consult-grep-doc "grep")))))

   (leaf *hydra-git
     :bind
     ("M-g" . *hydra-git/body)
     :pretty-hydra
     ((:title " Git" :color blue :quit-key "q" :foreign-keys warn :separator "-")
      ("Basic"
       (("w" magit-checkout "checkout")
	("s" magit-status "status")
	("b" magit-branch "branch")
	("F" magit-pull "pull")
	("f" magit-fetch "fetch")
	("A" magit-apply "apply")
	("c" magit-commit "commit")
	("P" magit-push "push"))
       ""
       (("d" magit-diff "diff")
	("l" magit-log "log")
	("r" magit-rebase "rebase")
	("z" magit-stash "stash")
	("!" magit-run "run shell command")
	("y" magit-show-refs "references"))
       "Hunk"
       (("," git-gutter:previous-hunk "previous" :exit nil)
	("." git-gutter:next-hunk "next" :exit nil)
	("g" git-gutter:stage-hunk "stage")
	("v" git-gutter:revert-hunk "revert")
	("p" git-gutter:popup-hunk "popup"))
       " GitHub"
       (("C" checkout-gh-pr "checkout PR")
	("o" browse-at-remote-or-copy"browse at point")
	("O" (shell-command "hub browse") "browse repository")))))

   (leaf *hydra-shortcuts3
     :doc "General Shortcuts"
     :bind ("M-o" . *hydra-shortcuts3/body)
     :pretty-hydra
     ((:title " Shortcuts" :color blue :quit-key "q" :foreign-keys warn :separator "-")
      ("Size"
       (("<left>" (shrink-window-horizontally 3) "←" :exit nil)
	("<up>"   (shrink-window 3) "↑" :exit nil)
	("<down>" (enlarge-window 3) "↓" :exit nil)
	("<right>"(enlarge-window-horizontally 3) "→" :exit nil))
       "Split"
       (("-" split-window-vertically "vertical")
	("/" split-window-horizontally "horizontal"))
       "Window"
       (("o" other-window "other" :exit nil)
	("d" kill-current-buffer "close")
	("D" kill-buffer-and-window "kill")
	("O" delete-other-windows "close others")
	("s" ace-swap-window "swap")
	("m" toggle-window-maximize "maximize")
	("<SPC>" rotate-layout "rotate" :exit nil))
       "Buffer"
       (("b" consult-buffer "open")
	("B" consult-buffer-other-window "open other")
	("R" (switch-to-buffer (get-buffer-create "*scratch*")) "scratch")
	("," previous-buffer "previous" :exit nil)
	("." next-buffer "next" :exit nil))
       "File"
       (("r" consult-buffer "recent")
	("f" consult-find "find")
	("p" consult-ghq-find "ghq")
	("@" projectile-run-shell-command-in-root "$run")
	("!" projectile-run-async-shell-command-in-root "$async"))
       "Org"
       (("c" org-capture "capture")
	("a" org-agenda "agenda")
	("j" org-journal-new-entry "journal")
	("t" (org-open-file org-task-file) "private")
	("z" (org-open-file org-work-file) "work")
	("l" calendar)))))
       (message "Hydra customization Complete")
#+End_Src

* Widgets
#+Begin_src emacs-lisp
  (leaf all-the-icons
  :if (window-system)
  :doc "All the icons i used by NeoTree"
  :url "https://github.com/domtronn/all-the-icons.el"
  :ensure t)

  (leaf neotree
    :doc "Sidebar for dired"
    :url "https://github.com/jaypei/emacs-neotree"
    :ensure t
    :bind
    ("<f9>" . neotree-projectile-toggle)
    :custom
    (neo-theme              . 'nerd)
    (neo-cwd-line-style     . 'button)
    (neo-autorefresh        . t)
    (neo-show-hidden-files  . t)
    (neo-mode-line-type     . nil)
    (neo-window-fixed-size  . nil)
    :hook (neotree-mode-hook . neo-hide-nono-header)
    :preface
    (defun neo-hide-nano-header ()
      "Hide nono header"
      (interactive)
      (setq header-line-format ""))
    (defun noetree-projectile-toggle ()
      "Toggle function for projectile"
      (interactive)
      (let ((project-dir
	     (ignore-errors
	       (projectile-protect-root)))
	    (file-name (buffer-file-name)))
	(if (and (fboundp 'neo-global--window-exists-p)
		 (neo-global--window-exists-p))
	    (neotree-hide)
	  (progn
	    (neotree-show)
	    (if project-dir
		(neotree-dir project-dir))
	    (if file-name
		(neotree-find file-name))))))
    :config
    ;; use nerd font in terminal
    (unless (window-system)
      (advice-add
       'neo-buffer--insert-fold-symbol
       :override
       (lambda (name &optional node-name)
	 (let ((n-insert-symbol (lambda (n)
				  (neo-buffer--insert-with-face
				   n 'neoo-expand-btn-face))))
	   (or (and (equal name 'open) (funcall n-insert-symbol "  "))
	       (and (equal name 'close) (funcall n-insert-symbol "  "))
	       (and (equal name 'leaf) (funcall n-insert-symbol ""))))))))

  (leaf imenu-list
  :doc "Show the current buffer's imenu entries in a seperate buffer"
  :url "https://github.com/Ladicle/imenu-list"
  :el-get "Ladicle/imenu-list"
  :bind ("<f10>" . imenu-list-smart-toggle)
  :hook (imenu-list-major-mode-hook . neo-hide-nano-header)
  :custom
  (imenu-list-auto-resize . t)
  (imenu-list-focus-after-activation . t)
  (imenu-list-entry-prefix   . "•")
  (imenu-list-subtree-prefix . "•")
  :custom-face
  (imenu-list-entry-face-1          . '((t (:foreground "white"))))
  (imenu-list-entry-subalist-face-0 . '((nil (:weight normal))))
  (imenu-list-entry-subalist-face-1 . '((nil (:weight normal))))
  (imenu-list-entry-subalist-face-2 . '((nil (:weight normal))))
  (imenu-list-entry-subalist-face-3 . '((nil (:weight normal)))))
#+End_src

#+Begin_src emacs-lisp

      ;; Input Assistance
    (leaf *hydra-theme
      :doc "Make emacs bindings that stick around"
      :url "https://github.com/abo-abo/hydra"
      :custom-face
      (hydra-face-red      . '((t (:foreground "#bd93f9"))))
      (hydra-face-blue     . '((t (:foreground "#8be9fd"))))
      (hydra-face-pink     . '((t (:foreground "#ff79c6"))))
      (hydra-face-teal     . '((t (:foreground "#61bfff"))))
      (hydra-face-amaranth . '((t (:foreground "#f1fa8c")))))
    (leaf major-mode-hydra
      :doc "Use pretty-hydra to define template easily"
      :url "https://github.com/jerrypnz/major-mode-hydra.el"
      :ensure t
      :require pretty-hydra)
    (leaf hydra-posframe
      :doc "Show hidra hints on posframe"
      :url "https://github.com/Ladicle/hydra-posframe"
      :if (window-system)
      :el-get "Ladicle/hydra-posframe"
      :global-minor-mode hydra-posframe-mode
      :custom
      (hydra-posframe-border-width . 5)
      (hydra-posframe-parameters   . '((left-fringe . 8) (right-fringe . 8)))
      :custom-face
      (hydra-posframe-border-face . '((t (:background "#323445")))))

    ;; fill-column
    (leaf visual-fill-column
      :doc "Centering & Wrap text visually"
      :url "https://codeberg.org/joostkremers/visual-fill-column"
      :ensure t
      :hook ((markdown-mode-hook org-mode-hook) . visual-fill-column-mode)
      :custom
      (visual-fill-column-width . 100)
      (visual-fill-column-center-text . t))

    (leaf display-fill-column-indicator-mode
      :doc "Indicate maximum colum"
      :url "https://www.emacswiki.org/emacs/FillColumnIndicator"
      :hook ((markdown-mode-hook git-commit-mode-hook) . display-fill-column-indicator-mode))

    (leaf rainbow-mode
    :doc "Color letter that indicate the color"
    :url "https://elpa.gnu.org/packages/rainbow-mode.html"
    :ensure t
    :hook (emacs-lisp-mode-hook . rainbow-mode))

  (leaf rainbow-delimiters
    :doc "Display brackets in rainbow"
    :url "https://www.emacswiki.org/emacs/RainbowDelimiters"
    :ensure t
    :hook (prog-mode-hook . rainbow-delimiters-mode))
  (message "Widgets Complete")
#+end_src

* Highlighting
#+Begin_src emacs-lisp
    (leaf *paren
      :doc "Hilight paired brackets"
      :url "https://www.emacswiki.org/emacs/ShowParenMode"
      :global-minor-mode show-paren-mode
      :custom
      (show-paren-style . 'mixed)
      (show-paren-when-point-inside-paren . t)
      (show-paren-when-point-in-periphery . t)
      :custom-face
      (show-paren-match . '((nil (:background "#44475a" :foreground "#f1fa8c")))))

    (leaf highlight-symbol
      :doc "Automatic & Manual symbol highlighting"
      :url "https://github.com/nschum/highlight-symbol.el"
      :ensure t
      :bind
      (("M-p"   . highlight-symbol-prev)
       ("M-n"   . highlight-symbol-next)))

    (leaf volatile-highlights
      :doc "Hilight the pasted region"
      :url "https://github.com/k-talo/volatile-highlights.el"
      :el-get "k-talo/volatile-highlights.el"
      :require volatile-highlights
      :global-minor-mode volatile-highlights-mode
      :custom-face
      (vhl/default-face . '((nil (:foreground "#FF3333" :background "#FFCDCD")))))

    (leaf *highlight-whitespace
      :doc "Highligh trailing whitespace"
      :hook
      ((prog-mode-hook markdown-mode-hook)
       . (lambda ()
	   (interactive)
	   (setq show-trailing-whitespace t))))

    (leaf highlight-indent-guides
      :doc "Display structure for easy viewing"
      :url "https://github.com/DarthFennec/highlight-indent-guides"
      :ensure t
      :hook (prog-mode-hook . highlight-indent-guides-mode)
      :custom
      (highlight-indent-guides-auto-enabled . t)
      (highlight-indent-guides-responsive   . t)
      (highlight-indent-guides-method . 'bitmap)
      :config
      (highlight-indent-guides-auto-set-faces))

    (leaf hl-todo
      :doc "Highlight TODO and similar keywords in comments and strings"
      :url "https://github.com/tarsius/hl-todo"
      :ensure t
      :hook (prog-mode-hook . hl-todo-mode))

  (leaf beacon
    :doc "A light that follows your cursor around so you don't lose it!"
    :url "https://github.com/Malabarba/beacon"
    :ensure t
    :custom
    (beacon-color . "#ff8c00"))
  
  (setq beacon-blink-duration 0.2)
  (setq beacon-size 35)
  (setq beacon-blink-delay 0.3)

  (beacon-mode 1)
(message "Highlighting Complete")
#+End_Src

* Music

#+Begin_src emacs-lisp

  (leaf emms
    :doc "Emacs Multimedia System"
    :url "https://www.gnu.org/software/emms/"
    :config
    (require 'emms-setup)
    (emms-all)
    (emms-default-players)
    (setq emms-source-file-default-directory "~/Music")
    (setq emms-playlist-buffer-name "*Music*"))
  (message "Music Complete")
#+End_src

* Mail

#+Begin_src emacs-lisp

#+End_src

  #+Begin_src emacs-lisp
   (provide 'init)
    ;;; init.el ends here
#+End_Src
